from django.db import models
from account.models import Account
import os
from pytils.translit import slugify # django–≤—Å–∫–∞—è slugify –Ω–µ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–∏—Ä–∏–ª–∏—Ü—É, –ø–æ—ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —ç—Ç–æ–π
from io import BytesIO
from django.contrib.sitemaps import ping_google
import uuid
import json
import csv
from django.db.models import Q
import itertools
from celery.result import AsyncResult


class Scrap(models.Model):
    title = models.CharField(max_length=70, verbose_name='–ù–∞–∑–≤–∞–Ω–∏–µ', default='')
    slug = models.SlugField(max_length=150, unique = True,verbose_name='–°—Å—ã–ª–∫–∞', default=str(uuid.uuid4()).replace('-',''))
    published = models.DateTimeField(auto_now_add=True, db_index=True, verbose_name='–û–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ') 
    author = models.ForeignKey('account.Account',null=True, on_delete=models.CASCADE, verbose_name='–ê–≤—Ç–æ—Ä', blank=True)
    content = models.TextField(max_length=5500, null=True, blank=True, verbose_name='–û–ø–∏—Å–∞–Ω–∏–µ', default='') 
    searching_device = models.PositiveIntegerField(verbose_name='–î–µ–≤–∞–π—Å –¥–ª—è –ø–æ–∏—Å–∫–∞', default=1)

    paid = models.BooleanField(verbose_name='–û–ø–ª–∞—á–µ–Ω–æ', default=False)

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—à–µ–π –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª–∏
    class Meta:
        verbose_name_plural='Scrapings' # verbose - –ø–æ–¥—Ä–æ–±–Ω—ã–π
        verbose_name= 'Scraping'
        ordering=['-published']

    def save(self, *args, **kwargs):
        if self._state.adding:
            self.slug = str(uuid.uuid4()).replace('-','')
        super(Scrap, self).save(*args, **kwargs)


    def get_related_files(scrap):
        files_list = []

        files = RelatedFile.objects.filter(Q(scrap=scrap), ~Q(file__contains='.html'), ~Q(file__contains='xpath_file'))
        for file in files:
            if file.celery_task_id != '' and AsyncResult(file.celery_task_id).status == 'SUCCESS':
                files_list.append(file)

        return files_list

    def get_searching_device(device_num):
        device_num = device_num.searching_device
        
        if device_num == 1:
            return 'üíª PC'
        elif device_num == 2:
            return 'üì± Android'
        elif device_num == 3:
            return 'üì± IOS'

    

class RelatedFile(models.Model):
    file = models.FileField() # upload_to="files/"
    scrap = models.ForeignKey('Scrap',null=True, blank=True, on_delete=models.CASCADE,verbose_name='Scrap')  
    celery_task_id = models.CharField(null=True, blank=True, verbose_name='Celery task id', max_length=100)
    uploaded_at = models.DateTimeField(auto_now_add=True)

    STATUS_CHOICES = (
        ('available', 'Available'),
        ('unavailable', 'Unavailable'),
    )
    status = models.CharField(max_length=20, choices=STATUS_CHOICES, default='available')



    def save(self, *args, **kwargs):
        if self._state.adding: # –£ ModelState –æ–±—ä–µ–∫—Ç–∞ –µ—Å—Ç—å –¥–≤–∞ –∞—Ç—Ä–∏–±—É—Ç–∞: adding—Ñ–ª–∞–≥ , —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, —á—Ç–æ –º–æ–¥–µ–ª—å –µ—â–µ –Ω–µ –±—ã–ª–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö, –∏ db —Å—Ç—Ä–æ–∫–∞, –æ—Ç–Ω–æ—Å—è—â–∞—è—Å—è –∫ –ø—Å–µ–≤–¥–æ–Ω–∏–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö, –∏–∑ –∫–æ—Ç–æ—Ä–æ–≥–æ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω —ç–∫–∑–µ–º–ø–ª—è—Ä.
            if 'request_user' in kwargs:
                this_user = kwargs['request_user']
                username = this_user.split('@')[0]
                data = kwargs['data']

                file_dir = self.get_file_dir(username) 
                file_name = str(uuid.uuid4()).replace('-','')
                file_format = self.file.name.split('.')[-1]

                if file_format == 'json':
                    if 'xpath_file' in str(self.file): file_name = 'xpath_file' + file_name # –µ—Å–ª–∏ —É –Ω–∞—Å —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é —Å xpaths —Å 1-–ì–û –≠–¢–ê–ü–ê

                    this_file = f"{file_dir}/{file_name}.{file_format}"
                    self.file = this_file
                    with open(this_file, "w", encoding='utf-8') as file:
                        json.dump(data, file, indent=4, ensure_ascii=False)
                elif file_format == 'csv':
                    this_file = f"{file_dir}/{file_name}.{file_format}"
                    self.file = this_file
                    with open(this_file, "w", encoding='utf-8-sig') as file:
                        writer = csv.writer(file, delimiter=';', lineterminator='\n')
                        titles_list = kwargs['titles_list']
                        writer.writerow(titles_list)

                        # –¢–∞–∫ –∫–∞–∫ data –ø—Ä–∏—Ö–æ–¥–∏—Ç –≤ —Ñ–æ—Ä–º–µ [[...],[...],[...]], —Ç–æ, —á—Ç–æ–±—ã –∑–∞–ø–∏—Å–∞—Ç—å –ø–æ —Ä—è–¥–∞–º, —Å–¥–µ–ª–∞–µ–º zip
                        result = list(itertools.zip_longest(*data, fillvalue=''))
                        for row in result: writer.writerow(row)
                else:
                    # –µ—Å–ª–∏ —É –Ω–∞—Å —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ —ç—Ç–∞–ø—ã html
                    if 'step_1_html' in str(self.file): file_name = 'step_1_html' + file_name 
                    if 'step_2_html' in str(self.file): file_name = 'step_2_html' + file_name 

                    this_file = f"{file_dir}/{file_name}.{file_format}"
                    self.file = this_file
                    data = data.decode('utf-8')
                    with open(this_file, "w", encoding='utf-8') as file:
                        file.write(data) # –ø–æ—Ç–æ–º—É —á—Ç–æ –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –≤ –±–∞–π—Ç–∞—Ö

                # content_file = kwargs['content_file']
                # self.file.save(file_dir + '/' + file_name + '.' + file_format, content_file, save=False)
                # super(RelatedFile, self).save({'request_user':this_user, 'content_file':content_file})

        super(RelatedFile, self).save()
            
            
    def get_file_dir(self, request_user):

        if os.path.isdir(f'files/{request_user}'):
            return str(f'files/{request_user}')
        else:
            os.mkdir(f'files/{request_user}')
            return self.get_file_dir(request_user)

    def translate(self, string):
        dic = {'–¨':'', '—å':'', '–™':'', '—ä':'', '–ê':'A', '–∞':'a', '–ë':'B', '–±':'b', '–í':'V', '–≤':'v',
            '–ì':'G', '–≥':'g', '–î':'D', '–¥':'d', '–ï':'E', '–µ':'e', '–Å':'E', '—ë':'e', '–ñ':'Zh', '–∂':'zh',
            '–ó':'Z', '–∑':'z', '–ò':'I', '–∏':'i', '–ô':'I', '–π':'i', '–ö':'K', '–∫':'k', '–õ':'L', '–ª':'l',
            '–ú':'M', '–º':'m', '–ù':'N', '–Ω':'n', '–û':'O', '–æ':'o', '–ü':'P', '–ø':'p', '–†':'R', '—Ä':'r', 
            '–°':'S', '—Å':'s', '–¢':'T', '—Ç':'t', '–£':'U', '—É':'u', '–§':'F', '—Ñ':'f', '–•':'Kh', '—Ö':'kh',
            '–¶':'Tc', '—Ü':'tc', '–ß':'Ch', '—á':'ch', '–®':'Sh', '—à':'sh', '–©':'Shch', '—â':'shch', '–´':'Y',
            '—ã':'y', '–≠':'E', '—ç':'e', '–Æ':'Iu', '—é':'iu', '–Ø':'Ia', '—è':'ia'}
            
        alphabet = ['–¨', '—å', '–™', '—ä', '–ê', '–∞', '–ë', '–±', '–í', '–≤', '–ì', '–≥', '–î', '–¥', '–ï', '–µ', '–Å', '—ë',
                    '–ñ', '–∂', '–ó', '–∑', '–ò', '–∏', '–ô', '–π', '–ö', '–∫', '–õ', '–ª', '–ú', '–º', '–ù', '–Ω', '–û', '–æ',
                    '–ü', '–ø', '–†', '—Ä', '–°', '—Å', '–¢', '—Ç', '–£', '—É', '–§', '—Ñ', '–•', '—Ö', '–¶', '—Ü', '–ß', '—á',
                    '–®', '—à', '–©', '—â', '–´', '—ã', '–≠', '—ç', '–Æ', '—é', '–Ø', '—è']
        

        st = string
        result = str()
        
        len_st = len(st)
        for i in range(0,len_st):
            if st[i] in alphabet:
                simb = dic[st[i]]
            else:
                simb = st[i]
            result = result + simb

        return result.replace(' ','_').lower()

    def file_format(self):
        return str(os.path.basename(self.file.name)).split('.')[-1]

    def get_file_color(self):
        file_format = str(os.path.basename(self.file.name)).split('.')[-1]

        if file_format == 'json':
            return 'json_color'
        elif file_format == 'csv':
            return 'csv_color'
        else:
            return 'default_color'

    def list_get(self, lst, i, default=''):
        try:
            return lst[i]
        except IndexError:
            return default